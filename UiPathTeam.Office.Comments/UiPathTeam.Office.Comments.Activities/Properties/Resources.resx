<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Input" xml:space="preserve">
    <value>Input</value>
    <comment>property group</comment>
  </data>
  <data name="Output" xml:space="preserve">
    <value>Output</value>
    <comment>property group</comment>
  </data>
  <data name="ParentScope" xml:space="preserve">
    <value>Parent Scope</value>
    <comment>display name</comment>
  </data>
  <data name="ParentScopeDescription" xml:space="preserve">
    <value>Contains and authenticates all child activities.</value>
    <comment>description</comment>
  </data>
  <data name="MetadataValidationError" xml:space="preserve">
    <value>Please provide a value for {0}.</value>
    <comment>validation error</comment>
  </data>
  <data name="ChildActivityDescription" xml:space="preserve">
    <value>Returns the sum of two numbers.</value>
    <comment>description</comment>
  </data>
  <data name="ChildActivityDisplayName" xml:space="preserve">
    <value>Child Activity</value>
    <comment>display name</comment>
  </data>
  <data name="ChildActivityFirstNumberDescription" xml:space="preserve">
    <value>The first number.</value>
    <comment>description</comment>
  </data>
  <data name="ChildActivityFirstNumberDisplayName" xml:space="preserve">
    <value>FirstNumber</value>
    <comment>display name</comment>
  </data>
  <data name="ChildActivitySumDescription" xml:space="preserve">
    <value>The sum of the two input numbers.</value>
    <comment>description</comment>
  </data>
  <data name="ChildActivitySumDisplayName" xml:space="preserve">
    <value>Sum</value>
    <comment>display name</comment>
  </data>
  <data name="ValidationMessage" xml:space="preserve">
    <value>Activity is only valid inside a Parent Scope.</value>
    <comment>validation message</comment>
  </data>
  <data name="ChildActivitySecondNumberDescription" xml:space="preserve">
    <value>The second number.</value>
    <comment>description</comment>
  </data>
  <data name="ChildActivitySecondNumberDisplayName" xml:space="preserve">
    <value>SecondNumber</value>
    <comment>property name</comment>
  </data>
  <data name="ExtractWordCommentsPathHintText" xml:space="preserve">
    <value>Hint</value>
    <comment>hint</comment>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Options (Extraction columns)</value>
    <comment>property group</comment>
  </data>
  <data name="ExtractAuthorDescription" xml:space="preserve">
    <value>Extract comment author. Column name "Author".</value>
    <comment>description</comment>
  </data>
  <data name="ExtractAuthorDisplayName" xml:space="preserve">
    <value>Extract Author</value>
    <comment>display name</comment>
  </data>
  <data name="ExtractCommentDescription" xml:space="preserve">
    <value>Extract comment text. Column name "Comment".</value>
    <comment>description</comment>
  </data>
  <data name="ExtractCommentDisplayName" xml:space="preserve">
    <value>Extract Comment</value>
    <comment>display name</comment>
  </data>
  <data name="ExtractDateDescription" xml:space="preserve">
    <value>Extract comment date. Column name "Date".</value>
    <comment>description</comment>
  </data>
  <data name="ExtractDateDisplayName" xml:space="preserve">
    <value>Extract Date</value>
    <comment>display name</comment>
  </data>
  <data name="ExtractScopeDescription" xml:space="preserve">
    <value>Extract comment scope. This is the text highlighted. Column name "Scope".</value>
    <comment>description</comment>
  </data>
  <data name="ExtractScopeDisplayName" xml:space="preserve">
    <value>Extract Scope</value>
    <comment>display name</comment>
  </data>
  <data name="FilePathDescription" xml:space="preserve">
    <value>Document path (String). Text must be quoted.</value>
    <comment>description</comment>
  </data>
  <data name="FilePathDisplayName" xml:space="preserve">
    <value>Document path &lt;String&gt;</value>
    <comment>display name</comment>
  </data>
  <data name="ResultDescription" xml:space="preserve">
    <value>Extraction result (DataTable). Based on the Extraction Options selected, the result will have different column number (e.g: To access Comment colomn use Result["Date"]).</value>
    <comment>description</comment>
  </data>
  <data name="ResultDisplayName" xml:space="preserve">
    <value>Result &lt;DataTable&gt;</value>
    <comment>display name</comment>
  </data>
</root>